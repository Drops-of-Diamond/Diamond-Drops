{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"textwrap","disambiguator":[8964873494598677339,13172162188140628186]},"crate_root":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src","external_crates":[{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14132309451737505806,1467093456902793816]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7759421768987061506,4831383116449874575]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3073455727397266299,17994214840392722620]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[13537501980368877142,14868096434222058830]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[15787344780239003752,1516226459437447392]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16858972993823147571,9260898311097977757]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14919942949869589394,8237062121922052545]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[181628772392720438,3888072624545100213]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[948239500546670706,6243098853028782101]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":10,"id":{"name":"unicode_width","disambiguator":[7916636481573708677,16949607808403518019]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":11,"id":{"name":"term_size","disambiguator":[9805189216874925078,5839764073268325226]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":12,"id":{"name":"libc","disambiguator":[13706360226707903930,3980553811867723424]}}],"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":40652,"line_start":1,"line_end":1216,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":40652,"line_start":1,"line_end":1216,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":98},{"krate":0,"index":104},{"krate":0,"index":100},{"krate":0,"index":26},{"krate":0,"index":108},{"krate":0,"index":114},{"krate":0,"index":110},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":118},{"krate":0,"index":124},{"krate":0,"index":120},{"krate":0,"index":36},{"krate":0,"index":42},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":60},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96}],"decl_id":null,"docs":" `textwrap` provides functions for word wrapping and filling text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1544,"byte_end":1566,"line_start":45,"line_end":45,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1567,"byte_end":1606,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2862,"byte_end":2874,"line_start":83,"line_end":83,"column_start":11,"column_end":23},"name":"WordSplitter","qualname":"::WordSplitter","value":"WordSplitter","parent":null,"children":[{"krate":0,"index":24}],"decl_id":null,"docs":" An interface for splitting words.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3464,"byte_end":3469,"line_start":99,"line_end":99,"column_start":8,"column_end":13},"name":"split","qualname":"::WordSplitter::split","value":"fn <'w> (&self, word: &'w str) -> Vec<(&'w str, &'w str, &'w str)>","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" An interface for splitting words.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3916,"byte_end":3929,"line_start":114,"line_end":114,"column_start":12,"column_end":25},"name":"NoHyphenation","qualname":"::NoHyphenation","value":"","parent":null,"children":[],"decl_id":null,"docs":" Use this as a [`Wrapper.splitter`] to avoid any kind of\n hyphenation:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4394,"byte_end":4408,"line_start":130,"line_end":130,"column_start":12,"column_end":26},"name":"HyphenSplitter","qualname":"::HyphenSplitter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple and default way to split words: splitting on existing\n hyphens only.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7842,"byte_end":7849,"line_start":227,"line_end":227,"column_start":12,"column_end":19},"name":"Wrapper","qualname":"::Wrapper","value":"Wrapper { width, initial_indent, subsequent_indent, break_words, splitter }","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103}],"decl_id":null,"docs":" A Wrapper holds settings for wrapping and filling text. Use it\n when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions\n are not flexible enough.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":95},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7945,"byte_end":7950,"line_start":229,"line_end":229,"column_start":9,"column_end":14},"name":"width","qualname":"::Wrapper::width","value":"usize","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" The width in columns at which the text will be wrapped.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8022,"byte_end":8036,"line_start":231,"line_end":231,"column_start":9,"column_end":23},"name":"initial_indent","qualname":"::Wrapper::initial_indent","value":"&'a str","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Indentation used for the first line of output.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":99},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8112,"byte_end":8129,"line_start":233,"line_end":233,"column_start":9,"column_end":26},"name":"subsequent_indent","qualname":"::Wrapper::subsequent_indent","value":"&'a str","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Indentation used for subsequent lines of output.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":101},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8297,"byte_end":8308,"line_start":237,"line_end":237,"column_start":9,"column_end":20},"name":"break_words","qualname":"::Wrapper::break_words","value":"bool","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Allow long words to be broken if they cannot fit on a line.\n When set to `false`, some lines may be longer than\n `self.width`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":103},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8507,"byte_end":8515,"line_start":241,"line_end":241,"column_start":9,"column_end":17},"name":"splitter","qualname":"::Wrapper::splitter","value":"S","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" The method for splitting words. If the `hyphenation` feature\n is enabled, you can use a `hyphenation::language::Corpus` here\n to get language-aware hyphenation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8953,"byte_end":8956,"line_start":252,"line_end":252,"column_start":12,"column_end":15},"name":"new","qualname":"<Wrapper<'a, HyphenSplitter>>::new","value":"fn (width: usize) -> Wrapper<'a, HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9648,"byte_end":9662,"line_start":271,"line_end":271,"column_start":12,"column_end":26},"name":"with_termwidth","qualname":"<Wrapper<'a, HyphenSplitter>>::with_termwidth","value":"fn () -> Wrapper<'a, HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10038,"byte_end":10051,"line_start":282,"line_end":282,"column_start":12,"column_end":25},"name":"with_splitter","qualname":"<Wrapper<'a, S>>::with_splitter","value":"fn (width: usize, splitter: S) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10835,"byte_end":10849,"line_start":308,"line_end":308,"column_start":12,"column_end":26},"name":"initial_indent","qualname":"<Wrapper<'a, S>>::initial_indent","value":"fn (self, indent: &'a str) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11543,"byte_end":11560,"line_start":330,"line_end":330,"column_start":12,"column_end":29},"name":"subsequent_indent","qualname":"<Wrapper<'a, S>>::subsequent_indent","value":"fn (self, indent: &'a str) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11915,"byte_end":11926,"line_start":339,"line_end":339,"column_start":12,"column_end":23},"name":"break_words","qualname":"<Wrapper<'a, S>>::break_words","value":"fn (self, setting: bool) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12833,"byte_end":12837,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"name":"fill","qualname":"<Wrapper<'a, S>>::fill","value":"fn (&self, s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14135,"byte_end":14139,"line_start":406,"line_end":406,"column_start":12,"column_end":16},"name":"wrap","qualname":"<Wrapper<'a, S>>::wrap","value":"fn (&self, s: &'a str) -> Vec<Cow<'a, str>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16065,"byte_end":16074,"line_start":452,"line_end":452,"column_start":12,"column_end":21},"name":"wrap_iter","qualname":"<Wrapper<'a, S>>::wrap_iter","value":"fn (&'w self, s: &'a str) -> WrapIter<'w, 'a, S>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17555,"byte_end":17569,"line_start":492,"line_end":492,"column_start":12,"column_end":26},"name":"into_wrap_iter","qualname":"<Wrapper<'a, S>>::into_wrap_iter","value":"fn (self, s: &'a str) -> IntoWrapIter<'a, S>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18275,"byte_end":18287,"line_start":513,"line_end":513,"column_start":12,"column_end":24},"name":"IntoWrapIter","qualname":"::IntoWrapIter","value":"IntoWrapIter {  }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":119}],"decl_id":null,"docs":" An iterator over the lines of the input string which owns a\n `Wrapper`. An instance of `IntoWrapIter` is typically obtained\n through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19007,"byte_end":19015,"line_start":535,"line_end":535,"column_start":12,"column_end":20},"name":"WrapIter","qualname":"::WrapIter","value":"WrapIter {  }","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":131}],"decl_id":null,"docs":" An iterator over the lines of the input string which borrows a\n `Wrapper`. An instance of `WrapIter` is typically obtained\n through the [`Wrapper::wrap_iter`] method.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25839,"byte_end":25848,"line_start":722,"line_end":722,"column_start":8,"column_end":17},"name":"termwidth","qualname":"::termwidth","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the current terminal width. If the terminal width cannot be\n determined (typically because the standard output is not connected\n to a terminal), a default width of 80 characters will be used.","sig":null,"attributes":[{"value":"cfg(feature = \"term_size\")","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25802,"byte_end":25831,"line_start":721,"line_end":721,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26786,"byte_end":26790,"line_start":748,"line_end":748,"column_start":8,"column_end":12},"name":"fill","qualname":"::fill","value":"fn (s: &str, width: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `width` characters. Strings are wrapped\n based on their displayed width, not their size in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27813,"byte_end":27817,"line_start":780,"line_end":780,"column_start":8,"column_end":12},"name":"wrap","qualname":"::wrap","value":"fn (s: &str, width: usize) -> Vec<Cow<str>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `width` characters. Strings are wrapped\n based on their displayed width, not their size in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29245,"byte_end":29254,"line_start":816,"line_end":816,"column_start":8,"column_end":17},"name":"wrap_iter","qualname":"::wrap_iter","value":"fn (s: &str, width: usize) -> IntoWrapIter<HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters. Strings are\n wrapped based on their displayed width, not their size in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30002,"byte_end":30008,"line_start":846,"line_end":846,"column_start":8,"column_end":14},"name":"indent","qualname":"::indent","value":"fn (s: &str, prefix: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Add prefix to each non-empty line.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30625,"byte_end":30631,"line_start":869,"line_end":869,"column_start":8,"column_end":14},"name":"dedent","qualname":"::dedent","value":"fn (s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Removes common leading whitespace from each line.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4038,"byte_end":4051,"line_start":118,"line_end":118,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4749,"byte_end":4763,"line_start":139,"line_end":139,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8532,"byte_end":8539,"line_start":244,"line_end":244,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9775,"byte_end":9782,"line_start":276,"line_end":276,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18420,"byte_end":18432,"line_start":518,"line_end":518,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19173,"byte_end":19181,"line_start":540,"line_end":540,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20130,"byte_end":20142,"line_start":571,"line_end":571,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20801,"byte_end":20813,"line_start":588,"line_end":588,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4038,"byte_end":4051,"line_start":118,"line_end":118,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":98},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4749,"byte_end":4763,"line_start":139,"line_end":139,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":108},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8532,"byte_end":8539,"line_start":244,"line_end":244,"column_start":10,"column_end":17},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9775,"byte_end":9782,"line_start":276,"line_end":276,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18420,"byte_end":18432,"line_start":518,"line_end":518,"column_start":40,"column_end":52},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":128},"to":{"krate":2,"index":3824}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19173,"byte_end":19181,"line_start":540,"line_end":540,"column_start":48,"column_end":56},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":134},"to":{"krate":2,"index":3824}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20130,"byte_end":20142,"line_start":571,"line_end":571,"column_start":25,"column_end":37},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":72},"to":{"krate":2,"index":7694}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20801,"byte_end":20813,"line_start":588,"line_end":588,"column_start":10,"column_end":22},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":72},"to":{"krate":4294967295,"index":4294967295}}]}