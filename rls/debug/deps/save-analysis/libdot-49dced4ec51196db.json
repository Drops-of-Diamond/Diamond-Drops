{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"dot","disambiguator":[14140200199832129914,8965841745306552889]},"crate_root":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src","external_crates":[{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14132309451737505806,1467093456902793816]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7759421768987061506,4831383116449874575]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3073455727397266299,17994214840392722620]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[13537501980368877142,14868096434222058830]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[15787344780239003752,1516226459437447392]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16858972993823147571,9260898311097977757]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14919942949869589394,8237062121922052545]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[181628772392720438,3888072624545100213]}},{"file_name":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[948239500546670706,6243098853028782101]}}],"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":53000,"line_start":11,"line_end":1635,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":53000,"line_start":11,"line_end":1635,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/james/.cargo/registry/src/github.com-1ecc6299db9ec823/dot-0.1.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":178},{"krate":0,"index":196},{"krate":0,"index":192},{"krate":0,"index":188},{"krate":0,"index":184},{"krate":0,"index":180},{"krate":0,"index":16},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":36},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":198},{"krate":0,"index":214},{"krate":0,"index":210},{"krate":0,"index":204},{"krate":0,"index":200},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":102},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":218},{"krate":0,"index":234},{"krate":0,"index":232},{"krate":0,"index":228},{"krate":0,"index":224},{"krate":0,"index":220},{"krate":0,"index":114},{"krate":0,"index":238},{"krate":0,"index":254},{"krate":0,"index":252},{"krate":0,"index":248},{"krate":0,"index":244},{"krate":0,"index":240},{"krate":0,"index":118},{"krate":0,"index":258},{"krate":0,"index":276},{"krate":0,"index":274},{"krate":0,"index":270},{"krate":0,"index":264},{"krate":0,"index":260},{"krate":0,"index":122},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":280},{"krate":0,"index":298},{"krate":0,"index":294},{"krate":0,"index":290},{"krate":0,"index":286},{"krate":0,"index":282},{"krate":0,"index":152},{"krate":0,"index":158},{"krate":0,"index":300},{"krate":0,"index":318},{"krate":0,"index":314},{"krate":0,"index":310},{"krate":0,"index":306},{"krate":0,"index":302},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172}],"decl_id":null,"docs":" Generate files suitable for use with [Graphviz](http://www.graphviz.org/)","sig":null,"attributes":[{"value":"crate_name = \"dot\"","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9781,"byte_end":9803,"line_start":265,"line_end":265,"column_start":1,"column_end":23}},{"value":"crate_type = \"rlib\"","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9804,"byte_end":9827,"line_start":266,"line_end":266,"column_start":1,"column_end":24}},{"value":"crate_type = \"dylib\"","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9828,"byte_end":9852,"line_start":267,"line_end":267,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":19},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10424,"byte_end":10432,"line_start":284,"line_end":284,"column_start":5,"column_end":13},"name":"LabelStr","qualname":"::LabelText::LabelStr","value":"LabelText::LabelStr(Cow<'a, str>)","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" This kind of label preserves the text directly as is.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":23},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10998,"byte_end":11004,"line_start":296,"line_end":296,"column_start":5,"column_end":11},"name":"EscStr","qualname":"::LabelText::EscStr","value":"LabelText::EscStr(Cow<'a, str>)","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" This kind of label uses the graphviz label escString type:\n http://www.graphviz.org/content/attrs#kescString","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11265,"byte_end":11272,"line_start":303,"line_end":303,"column_start":5,"column_end":12},"name":"HtmlStr","qualname":"::LabelText::HtmlStr","value":"LabelText::HtmlStr(Cow<'a, str>)","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" This uses a graphviz [HTML string label][html]. The string is\n printed exactly as given, but between `<` and `>`. **No\n escaping is performed.**","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10218,"byte_end":10227,"line_start":279,"line_end":279,"column_start":10,"column_end":19},"name":"LabelText","qualname":"::LabelText","value":"LabelText::{LabelStr, EscStr, HtmlStr}","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":23},{"krate":0,"index":27}],"decl_id":null,"docs":" The text for a graphviz label on a node or edge.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":105},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11522,"byte_end":11526,"line_start":311,"line_end":311,"column_start":5,"column_end":9},"name":"None","qualname":"::Style::None","value":"Style::None","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":107},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11532,"byte_end":11541,"line_start":312,"line_end":312,"column_start":5,"column_end":14},"name":"Invisible","qualname":"::Style::Invisible","value":"Style::Invisible","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":109},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11547,"byte_end":11552,"line_start":313,"line_end":313,"column_start":5,"column_end":10},"name":"Solid","qualname":"::Style::Solid","value":"Style::Solid","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":111},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11558,"byte_end":11564,"line_start":314,"line_end":314,"column_start":5,"column_end":11},"name":"Dashed","qualname":"::Style::Dashed","value":"Style::Dashed","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":113},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11570,"byte_end":11576,"line_start":315,"line_end":315,"column_start":5,"column_end":11},"name":"Dotted","qualname":"::Style::Dotted","value":"Style::Dotted","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":115},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11582,"byte_end":11586,"line_start":316,"line_end":316,"column_start":5,"column_end":9},"name":"Bold","qualname":"::Style::Bold","value":"Style::Bold","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":117},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11592,"byte_end":11599,"line_start":317,"line_end":317,"column_start":5,"column_end":12},"name":"Rounded","qualname":"::Style::Rounded","value":"Style::Rounded","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":119},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11605,"byte_end":11614,"line_start":318,"line_end":318,"column_start":5,"column_end":14},"name":"Diagonals","qualname":"::Style::Diagonals","value":"Style::Diagonals","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":121},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11620,"byte_end":11626,"line_start":319,"line_end":319,"column_start":5,"column_end":11},"name":"Filled","qualname":"::Style::Filled","value":"Style::Filled","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":123},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11632,"byte_end":11639,"line_start":320,"line_end":320,"column_start":5,"column_end":12},"name":"Striped","qualname":"::Style::Striped","value":"Style::Striped","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":125},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11645,"byte_end":11651,"line_start":321,"line_end":321,"column_start":5,"column_end":11},"name":"Wedged","qualname":"::Style::Wedged","value":"Style::Wedged","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11510,"byte_end":11515,"line_start":310,"line_end":310,"column_start":10,"column_end":15},"name":"Style","qualname":"::Style","value":"Style::{None, Invisible, Solid, Dashed, Dotted, Bold, Rounded, Diagonals, Filled, Striped, Wedged}","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125}],"decl_id":null,"docs":" The style for a node or edge.\n See http://www.graphviz.org/doc/info/attrs.html#k:style for descriptions.\n Note that some of these are not valid for edges.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11501,"byte_end":11654,"line_start":310,"line_end":322,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11501,"byte_end":11654,"line_start":310,"line_end":322,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11680,"byte_end":11688,"line_start":325,"line_end":325,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Style>::as_slice","value":"fn (self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13945,"byte_end":13947,"line_start":375,"line_end":375,"column_start":12,"column_end":14},"name":"Id","qualname":"::Id","value":"Id {  }","parent":null,"children":[{"krate":0,"index":33}],"decl_id":null,"docs":" `Id` is a Graphviz `ID`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14684,"byte_end":14687,"line_start":394,"line_end":394,"column_start":12,"column_end":15},"name":"new","qualname":"<Id<'a>>::new","value":"fn <Name> (name: Name) -> Result<Id<'a>, ()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15529,"byte_end":15537,"line_start":419,"line_end":419,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Id<'a>>::as_slice","value":"fn (&'a self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15599,"byte_end":15603,"line_start":423,"line_end":423,"column_start":12,"column_end":16},"name":"name","qualname":"<Id<'a>>::name","value":"fn (self) -> Cow<'a, str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16164,"byte_end":16172,"line_start":437,"line_end":437,"column_start":11,"column_end":19},"name":"Labeller","qualname":"::Labeller","value":"Labeller<'a, N, E>","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60}],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16256,"byte_end":16264,"line_start":439,"line_end":439,"column_start":8,"column_end":16},"name":"graph_id","qualname":"::Labeller::graph_id","value":"fn (&'a self) -> Id<'a>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16468,"byte_end":16475,"line_start":444,"line_end":444,"column_start":8,"column_end":15},"name":"node_id","qualname":"::Labeller::node_id","value":"fn (&'a self, n: &N) -> Id<'a>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16703,"byte_end":16713,"line_start":450,"line_end":450,"column_start":8,"column_end":18},"name":"node_shape","qualname":"::Labeller::node_shape","value":"fn (&'a self, _node: &N) -> Option<LabelText<'a>>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16981,"byte_end":16991,"line_start":457,"line_end":457,"column_start":8,"column_end":18},"name":"node_label","qualname":"::Labeller::node_label","value":"fn (&'a self, n: &N) -> LabelText<'a>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17269,"byte_end":17279,"line_start":464,"line_end":464,"column_start":8,"column_end":18},"name":"edge_label","qualname":"::Labeller::edge_label","value":"fn (&'a self, e: &E) -> LabelText<'a>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17454,"byte_end":17464,"line_start":470,"line_end":470,"column_start":8,"column_end":18},"name":"node_style","qualname":"::Labeller::node_style","value":"fn (&'a self, _n: &N) -> Style","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17730,"byte_end":17740,"line_start":478,"line_end":478,"column_start":8,"column_end":18},"name":"node_color","qualname":"::Labeller::node_color","value":"fn (&'a self, _node: &N) -> Option<LabelText<'a>>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17930,"byte_end":17944,"line_start":484,"line_end":484,"column_start":8,"column_end":22},"name":"edge_end_arrow","qualname":"::Labeller::edge_end_arrow","value":"fn (&'a self, _e: &E) -> Arrow","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18127,"byte_end":18143,"line_start":490,"line_end":490,"column_start":8,"column_end":24},"name":"edge_start_arrow","qualname":"::Labeller::edge_start_arrow","value":"fn (&'a self, _e: &E) -> Arrow","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18282,"byte_end":18292,"line_start":495,"line_end":495,"column_start":8,"column_end":18},"name":"edge_style","qualname":"::Labeller::edge_style","value":"fn (&'a self, _e: &E) -> Style","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18558,"byte_end":18568,"line_start":503,"line_end":503,"column_start":8,"column_end":18},"name":"edge_color","qualname":"::Labeller::edge_color","value":"fn (&'a self, _e: &E) -> Option<LabelText<'a>>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18711,"byte_end":18715,"line_start":509,"line_end":509,"column_start":8,"column_end":12},"name":"kind","qualname":"::Labeller::kind","value":"fn (&self) -> Kind","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Each instance of a type that implements `Label<C>` maps to a\n unique identifier with respect to `C`, which is used to identify\n it in the generated .dot file. They can also provide more\n elaborate (and non-unique) label text that is used in the graphviz\n rendered output.\n The graph instance is responsible for providing the DOT compatible\n identifiers for the nodes and (optionally) rendered labels for the nodes and\n edges, as well as an identifier for the graph itself.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18865,"byte_end":18876,"line_start":516,"line_end":516,"column_start":8,"column_end":19},"name":"escape_html","qualname":"::escape_html","value":"fn (s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escape tags in such a way that it is suitable for inclusion in a\n Graphviz HTML label.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19067,"byte_end":19072,"line_start":525,"line_end":525,"column_start":12,"column_end":17},"name":"label","qualname":"<LabelText<'a>>::label","value":"fn <S> (s: S) -> LabelText<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19165,"byte_end":19172,"line_start":529,"line_end":529,"column_start":12,"column_end":19},"name":"escaped","qualname":"<LabelText<'a>>::escaped","value":"fn <S> (s: S) -> LabelText<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19263,"byte_end":19267,"line_start":533,"line_end":533,"column_start":12,"column_end":16},"name":"html","qualname":"<LabelText<'a>>::html","value":"fn <S> (s: S) -> LabelText<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20140,"byte_end":20153,"line_start":563,"line_end":563,"column_start":12,"column_end":25},"name":"to_dot_string","qualname":"<LabelText<'a>>::to_dot_string","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21050,"byte_end":21061,"line_start":588,"line_end":588,"column_start":12,"column_end":23},"name":"prefix_line","qualname":"<LabelText<'a>>::prefix_line","value":"fn (self, prefix: LabelText) -> LabelText<'static>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21241,"byte_end":21252,"line_start":593,"line_end":593,"column_start":12,"column_end":23},"name":"suffix_line","qualname":"<LabelText<'a>>::suffix_line","value":"fn (self, suffix: LabelText) -> LabelText<'static>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21697,"byte_end":21702,"line_start":606,"line_end":606,"column_start":12,"column_end":17},"name":"Arrow","qualname":"::Arrow","value":"Arrow { arrows }","parent":null,"children":[{"krate":0,"index":127}],"decl_id":null,"docs":" This structure holds all information that can describe an arrow connected to\n either start or end of an edge.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21686,"byte_end":21739,"line_start":606,"line_end":608,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":127},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21713,"byte_end":21719,"line_start":607,"line_end":607,"column_start":9,"column_end":15},"name":"arrows","qualname":"::Arrow::arrows","value":"std::vec::Vec<ArrowShape>","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21970,"byte_end":21977,"line_start":619,"line_end":619,"column_start":12,"column_end":19},"name":"default","qualname":"<Arrow>::default","value":"fn () -> Arrow","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22118,"byte_end":22122,"line_start":626,"line_end":626,"column_start":12,"column_end":16},"name":"none","qualname":"<Arrow>::none","value":"fn () -> Arrow","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22299,"byte_end":22305,"line_start":633,"line_end":633,"column_start":12,"column_end":18},"name":"normal","qualname":"<Arrow>::normal","value":"fn () -> Arrow","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22490,"byte_end":22500,"line_start":640,"line_end":640,"column_start":12,"column_end":22},"name":"from_arrow","qualname":"<Arrow>::from_arrow","value":"fn (arrow: ArrowShape) -> Arrow","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22676,"byte_end":22689,"line_start":647,"line_end":647,"column_start":12,"column_end":25},"name":"to_dot_string","qualname":"<Arrow>::to_dot_string","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":131},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23463,"byte_end":23467,"line_start":682,"line_end":682,"column_start":5,"column_end":9},"name":"Open","qualname":"::Fill::Open","value":"Fill::Open","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":133},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23473,"byte_end":23479,"line_start":683,"line_end":683,"column_start":5,"column_end":11},"name":"Filled","qualname":"::Fill::Filled","value":"Fill::Filled","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":218},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23452,"byte_end":23456,"line_start":681,"line_end":681,"column_start":10,"column_end":14},"name":"Fill","qualname":"::Fill","value":"Fill::{Open, Filled}","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":133}],"decl_id":null,"docs":" Arrow modifier that determines if the shape is empty or filled.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23443,"byte_end":23482,"line_start":681,"line_end":684,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23443,"byte_end":23482,"line_start":681,"line_end":684,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23507,"byte_end":23515,"line_start":687,"line_end":687,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Fill>::as_slice","value":"fn (self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":137},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23829,"byte_end":23833,"line_start":699,"line_end":699,"column_start":5,"column_end":9},"name":"Left","qualname":"::Side::Left","value":"Side::Left","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":139},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23839,"byte_end":23844,"line_start":700,"line_end":700,"column_start":5,"column_end":10},"name":"Right","qualname":"::Side::Right","value":"Side::Right","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":141},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23850,"byte_end":23854,"line_start":701,"line_end":701,"column_start":5,"column_end":9},"name":"Both","qualname":"::Side::Both","value":"Side::Both","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":238},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23818,"byte_end":23822,"line_start":698,"line_end":698,"column_start":10,"column_end":14},"name":"Side","qualname":"::Side","value":"Side::{Left, Right, Both}","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" Arrow modifier that determines if the shape is clipped.\n For example `Side::Left` means only left side is visible.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23809,"byte_end":23857,"line_start":698,"line_end":702,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23809,"byte_end":23857,"line_start":698,"line_end":702,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23882,"byte_end":23890,"line_start":705,"line_end":705,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Side>::as_slice","value":"fn (self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":145},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24301,"byte_end":24308,"line_start":720,"line_end":720,"column_start":5,"column_end":12},"name":"NoArrow","qualname":"::ArrowShape::NoArrow","value":"ArrowShape::NoArrow","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" No arrow will be displayed\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":147},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24477,"byte_end":24483,"line_start":723,"line_end":723,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ArrowShape::Normal","value":"ArrowShape::Normal(Fill, Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow that ends in a triangle. Basically a normal arrow.\n NOTE: there is error in official documentation, this supports both fill and side clipping\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":153},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24544,"byte_end":24547,"line_start":725,"line_end":725,"column_start":5,"column_end":8},"name":"Box","qualname":"::ArrowShape::Box","value":"ArrowShape::Box(Fill, Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending in a small square box\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":159},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24637,"byte_end":24641,"line_start":727,"line_end":727,"column_start":5,"column_end":9},"name":"Crow","qualname":"::ArrowShape::Crow","value":"ArrowShape::Crow(Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending in a three branching lines also called crow's foot\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":163},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24685,"byte_end":24690,"line_start":729,"line_end":729,"column_start":5,"column_end":10},"name":"Curve","qualname":"::ArrowShape::Curve","value":"ArrowShape::Curve(Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending in a curve\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":167},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24744,"byte_end":24750,"line_start":731,"line_end":731,"column_start":5,"column_end":11},"name":"ICurve","qualname":"::ArrowShape::ICurve","value":"ArrowShape::ICurve(Fill, Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending in an inverted curve\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":173},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24829,"byte_end":24836,"line_start":733,"line_end":733,"column_start":5,"column_end":12},"name":"Diamond","qualname":"::ArrowShape::Diamond","value":"ArrowShape::Diamond(Fill, Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending in an diamond shaped rectangular shape.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":179},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24888,"byte_end":24891,"line_start":735,"line_end":735,"column_start":5,"column_end":8},"name":"Dot","qualname":"::ArrowShape::Dot","value":"ArrowShape::Dot(Fill)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending in a circle.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":183},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24949,"byte_end":24952,"line_start":737,"line_end":737,"column_start":5,"column_end":8},"name":"Inv","qualname":"::ArrowShape::Inv","value":"ArrowShape::Inv(Fill, Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending in an inverted triangle.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":189},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25014,"byte_end":25017,"line_start":739,"line_end":739,"column_start":5,"column_end":8},"name":"Tee","qualname":"::ArrowShape::Tee","value":"ArrowShape::Tee(Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending with a T shaped arrow.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":193},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25073,"byte_end":25076,"line_start":741,"line_end":741,"column_start":5,"column_end":8},"name":"Vee","qualname":"::ArrowShape::Vee","value":"ArrowShape::Vee(Side)","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Arrow ending with a V shaped arrow.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24249,"byte_end":24259,"line_start":718,"line_end":718,"column_start":10,"column_end":20},"name":"ArrowShape","qualname":"::ArrowShape","value":"ArrowShape::{NoArrow, Normal, Box, Crow, Curve, ICurve, Diamond, Dot, Inv, Tee, Vee}","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":153},{"krate":0,"index":159},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":173},{"krate":0,"index":179},{"krate":0,"index":183},{"krate":0,"index":189},{"krate":0,"index":193}],"decl_id":null,"docs":" This enumeration represents all possible arrow edge\n as defined in [grapviz documentation](http://www.graphviz.org/content/arrow-shapes).\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24240,"byte_end":25085,"line_start":718,"line_end":742,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24240,"byte_end":25085,"line_start":718,"line_end":742,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25159,"byte_end":25163,"line_start":745,"line_end":745,"column_start":12,"column_end":16},"name":"none","qualname":"<ArrowShape>::none","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25276,"byte_end":25282,"line_start":750,"line_end":750,"column_start":12,"column_end":18},"name":"normal","qualname":"<ArrowShape>::normal","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25427,"byte_end":25432,"line_start":755,"line_end":755,"column_start":12,"column_end":17},"name":"boxed","qualname":"<ArrowShape>::boxed","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25575,"byte_end":25579,"line_start":760,"line_end":760,"column_start":12,"column_end":16},"name":"crow","qualname":"<ArrowShape>::crow","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25710,"byte_end":25715,"line_start":765,"line_end":765,"column_start":12,"column_end":17},"name":"curve","qualname":"<ArrowShape>::curve","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25849,"byte_end":25855,"line_start":770,"line_end":770,"column_start":12,"column_end":18},"name":"icurve","qualname":"<ArrowShape>::icurve","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25996,"byte_end":26003,"line_start":775,"line_end":775,"column_start":12,"column_end":19},"name":"diamond","qualname":"<ArrowShape>::diamond","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26151,"byte_end":26154,"line_start":780,"line_end":780,"column_start":12,"column_end":15},"name":"dot","qualname":"<ArrowShape>::dot","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26307,"byte_end":26310,"line_start":785,"line_end":785,"column_start":12,"column_end":15},"name":"inv","qualname":"<ArrowShape>::inv","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26449,"byte_end":26452,"line_start":790,"line_end":790,"column_start":12,"column_end":15},"name":"tee","qualname":"<ArrowShape>::tee","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26577,"byte_end":26580,"line_start":795,"line_end":795,"column_start":12,"column_end":15},"name":"vee","qualname":"<ArrowShape>::vee","value":"fn () -> ArrowShape","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26731,"byte_end":26744,"line_start":800,"line_end":800,"column_start":12,"column_end":25},"name":"to_dot_string","qualname":"<ArrowShape>::to_dot_string","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28180,"byte_end":28185,"line_start":838,"line_end":838,"column_start":10,"column_end":15},"name":"Nodes","qualname":"::Nodes","value":"Cow<'a, [N]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28216,"byte_end":28221,"line_start":839,"line_end":839,"column_start":10,"column_end":15},"name":"Edges","qualname":"::Edges","value":"Cow<'a, [E]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":199},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28397,"byte_end":28404,"line_start":845,"line_end":845,"column_start":5,"column_end":12},"name":"Digraph","qualname":"::Kind::Digraph","value":"Kind::Digraph","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":201},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28410,"byte_end":28415,"line_start":846,"line_end":846,"column_start":5,"column_end":10},"name":"Graph","qualname":"::Kind::Graph","value":"Kind::Graph","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28386,"byte_end":28390,"line_start":844,"line_end":844,"column_start":10,"column_end":14},"name":"Kind","qualname":"::Kind","value":"Kind::{Digraph, Graph}","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":201}],"decl_id":null,"docs":" Graph kind determines if `digraph` or `graph` is used as keyword\n for the graph.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28377,"byte_end":28418,"line_start":844,"line_end":847,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28377,"byte_end":28418,"line_start":844,"line_end":847,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29665,"byte_end":29674,"line_start":884,"line_end":884,"column_start":11,"column_end":20},"name":"GraphWalk","qualname":"::GraphWalk","value":"GraphWalk<'a, N: Clone, E: Clone>","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166}],"decl_id":null,"docs":" GraphWalk is an abstraction over a graph = (nodes,edges)\n made up of node handles `N` and edge handles `E`, where each `E`\n can be mapped to its source and target nodes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29753,"byte_end":29758,"line_start":886,"line_end":886,"column_start":8,"column_end":13},"name":"nodes","qualname":"::GraphWalk::nodes","value":"fn (&'a self) -> Nodes<'a, N>","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" GraphWalk is an abstraction over a graph = (nodes,edges)\n made up of node handles `N` and edge handles `E`, where each `E`\n can be mapped to its source and target nodes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29841,"byte_end":29846,"line_start":888,"line_end":888,"column_start":8,"column_end":13},"name":"edges","qualname":"::GraphWalk::edges","value":"fn (&'a self) -> Edges<'a, E>","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" GraphWalk is an abstraction over a graph = (nodes,edges)\n made up of node handles `N` and edge handles `E`, where each `E`\n can be mapped to its source and target nodes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29917,"byte_end":29923,"line_start":890,"line_end":890,"column_start":8,"column_end":14},"name":"source","qualname":"::GraphWalk::source","value":"fn (&'a self, edge: &E) -> N","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" GraphWalk is an abstraction over a graph = (nodes,edges)\n made up of node handles `N` and edge handles `E`, where each `E`\n can be mapped to its source and target nodes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29993,"byte_end":29999,"line_start":892,"line_end":892,"column_start":8,"column_end":14},"name":"target","qualname":"::GraphWalk::target","value":"fn (&'a self, edge: &E) -> N","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" GraphWalk is an abstraction over a graph = (nodes,edges)\n made up of node handles `N` and edge handles `E`, where each `E`\n can be mapped to its source and target nodes.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":203},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30102,"byte_end":30114,"line_start":897,"line_end":897,"column_start":5,"column_end":17},"name":"NoEdgeLabels","qualname":"::RenderOption::NoEdgeLabels","value":"RenderOption::NoEdgeLabels","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":205},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30120,"byte_end":30132,"line_start":898,"line_end":898,"column_start":5,"column_end":17},"name":"NoNodeLabels","qualname":"::RenderOption::NoNodeLabels","value":"RenderOption::NoNodeLabels","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":207},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30138,"byte_end":30150,"line_start":899,"line_end":899,"column_start":5,"column_end":17},"name":"NoEdgeStyles","qualname":"::RenderOption::NoEdgeStyles","value":"RenderOption::NoEdgeStyles","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":209},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30156,"byte_end":30168,"line_start":900,"line_end":900,"column_start":5,"column_end":17},"name":"NoEdgeColors","qualname":"::RenderOption::NoEdgeColors","value":"RenderOption::NoEdgeColors","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":211},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30174,"byte_end":30186,"line_start":901,"line_end":901,"column_start":5,"column_end":17},"name":"NoNodeStyles","qualname":"::RenderOption::NoNodeStyles","value":"RenderOption::NoNodeStyles","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":213},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30192,"byte_end":30204,"line_start":902,"line_end":902,"column_start":5,"column_end":17},"name":"NoNodeColors","qualname":"::RenderOption::NoNodeColors","value":"RenderOption::NoNodeColors","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":215},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30210,"byte_end":30218,"line_start":903,"line_end":903,"column_start":5,"column_end":13},"name":"NoArrows","qualname":"::RenderOption::NoArrows","value":"RenderOption::NoArrows","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":300},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30083,"byte_end":30095,"line_start":896,"line_end":896,"column_start":10,"column_end":22},"name":"RenderOption","qualname":"::RenderOption","value":"RenderOption::{NoEdgeLabels, NoNodeLabels, NoEdgeStyles, NoEdgeColors, NoNodeStyles, NoNodeColors, NoArrows}","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30074,"byte_end":30221,"line_start":896,"line_end":904,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30074,"byte_end":30221,"line_start":896,"line_end":904,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30286,"byte_end":30301,"line_start":907,"line_end":907,"column_start":8,"column_end":23},"name":"default_options","qualname":"::default_options","value":"fn () -> Vec<RenderOption>","parent":null,"children":[],"decl_id":null,"docs":" Returns vec holding all the default render options.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30485,"byte_end":30491,"line_start":913,"line_end":913,"column_start":8,"column_end":14},"name":"render","qualname":"::render","value":"fn <'a, N, E, G, W> (g: &'a G, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Renders graph `g` into the writer `w` in DOT syntax.\n (Simple wrapper around `render_opts` that passes a default set of options.)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30827,"byte_end":30838,"line_start":926,"line_end":926,"column_start":8,"column_end":19},"name":"render_opts","qualname":"::render_opts","value":"fn <'a, N, E, G, W> (g: &'a G, w: &mut W, options: &[RenderOption]) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Renders graph `g` into the writer `w` in DOT syntax.\n (Main entry point for the library.)\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11661,"byte_end":11666,"line_start":324,"line_end":324,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13990,"byte_end":13992,"line_start":379,"line_end":379,"column_start":10,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19040,"byte_end":19049,"line_start":524,"line_end":524,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21772,"byte_end":21777,"line_start":612,"line_end":612,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23489,"byte_end":23493,"line_start":686,"line_end":686,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23864,"byte_end":23868,"line_start":704,"line_end":704,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25091,"byte_end":25101,"line_start":743,"line_end":743,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28425,"byte_end":28429,"line_start":849,"line_end":849,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11661,"byte_end":11666,"line_start":324,"line_end":324,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13990,"byte_end":13992,"line_start":379,"line_end":379,"column_start":10,"column_end":12},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19040,"byte_end":19049,"line_start":524,"line_end":524,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":14},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21772,"byte_end":21777,"line_start":612,"line_end":612,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23489,"byte_end":23493,"line_start":686,"line_end":686,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23864,"byte_end":23868,"line_start":704,"line_end":704,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25091,"byte_end":25101,"line_start":743,"line_end":743,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,106,97,109,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,116,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28425,"byte_end":28429,"line_start":849,"line_end":849,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}}]}