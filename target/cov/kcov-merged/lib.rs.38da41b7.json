var data = {lines:[
{"lineNum":"    1","line":"#![allow(unused_variables)]","class":"lineCov","hits":"1","order":"1",},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#[macro_use]"},
{"lineNum":"    4","line":"extern crate log;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"extern crate diamond_drops_cli as cli;"},
{"lineNum":"    7","line":"extern crate diamond_drops_env as env;"},
{"lineNum":"    8","line":"extern crate diamond_drops_node as node;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"use node::modules::{client_thread, smc_listener, collation};"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"// std imports"},
{"lineNum":"   13","line":"use std::sync::mpsc;"},
{"lineNum":"   14","line":"use std::thread;"},
{"lineNum":"   15","line":"use std::time::Duration;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"/// The main function to run the node."},
{"lineNum":"   18","line":"///"},
{"lineNum":"   19","line":"/// # Inputs"},
{"lineNum":"   20","line":"///"},
{"lineNum":"   21","line":"/// Config - A struct containing the configuration values for the client"},
{"lineNum":"   22","line":"pub fn run(config: cli::modules::config::Config) -> () {"},
{"lineNum":"   23","line":"    debug!(\"Client Config - Mode: {:?}\", config.mode);"},
{"lineNum":"   24","line":"    debug!(\"Client Config - Collation Active: {:?}\", config.collation_active);"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    if config.collation_active == true {"},
{"lineNum":"   27","line":"        let header = collation::header::create_sample_collation_header();"},
{"lineNum":"   28","line":"        let body = collation::body::create_sample_collation_body();"},
{"lineNum":"   29","line":"        let collation = collation::collation::Collation::new(header, body);"},
{"lineNum":"   30","line":"        debug!(\"Successfully created collation: {:?}\", collation);"},
{"lineNum":"   31","line":"    }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    match config.mode {"},
{"lineNum":"   34","line":"        cli::modules::config::Mode::Proposer => {"},
{"lineNum":"   35","line":"            debug!(\"Running as a proposer\");"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"            // Create the SMC Listener"},
{"lineNum":"   38","line":"            let (smc_tx, smc_rx) = mpsc::channel();"},
{"lineNum":"   39","line":"            let smc = smc_listener::SMCListener::new(smc_tx);"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"            // Start a thread to run the proposer"},
{"lineNum":"   42","line":"            let mut proposer_thread = client_thread::ClientThread::new(&config.mode);"},
{"lineNum":"   43","line":"            proposer_thread.run(smc_rx);"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"            if env::config::is_running_with_cargo_test() {"},
{"lineNum":"   46","line":"                thread::sleep(Duration::from_secs(1));"},
{"lineNum":"   47","line":"                let _result = proposer_thread"},
{"lineNum":"   48","line":"                    .manager"},
{"lineNum":"   49","line":"                    .unwrap()"},
{"lineNum":"   50","line":"                    .send(client_thread::Command::Terminate);"},
{"lineNum":"   51","line":"            }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"            // Wait for thread termination"},
{"lineNum":"   54","line":"            match proposer_thread.handle.unwrap().join() {"},
{"lineNum":"   55","line":"                Ok(x) => {"},
{"lineNum":"   56","line":"                    debug!(\"Successful proposer thread join {:?}\", x);"},
{"lineNum":"   57","line":"                    ()"},
{"lineNum":"   58","line":"                }"},
{"lineNum":"   59","line":"                Err(e) => {"},
{"lineNum":"   60","line":"                    panic!(\"Failed proposer thread join {:?}\", e);"},
{"lineNum":"   61","line":"                }"},
{"lineNum":"   62","line":"            }"},
{"lineNum":"   63","line":"        }"},
{"lineNum":"   64","line":"        cli::modules::config::Mode::Notary => {"},
{"lineNum":"   65","line":"            debug!(\"Running as a notary\");"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"            // Create the SMC Listener"},
{"lineNum":"   68","line":"            let (smc_tx, smc_rx) = mpsc::channel();"},
{"lineNum":"   69","line":"            let smc = smc_listener::SMCListener::new(smc_tx);"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"            // Start a thread to run the notary"},
{"lineNum":"   72","line":"            let mut notary_thread = client_thread::ClientThread::new(&config.mode);"},
{"lineNum":"   73","line":"            notary_thread.run(smc_rx);"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"            if env::config::is_running_with_cargo_test() {"},
{"lineNum":"   76","line":"                thread::sleep(Duration::from_secs(1));"},
{"lineNum":"   77","line":"                let _result = notary_thread"},
{"lineNum":"   78","line":"                    .manager"},
{"lineNum":"   79","line":"                    .unwrap()"},
{"lineNum":"   80","line":"                    .send(client_thread::Command::Terminate);"},
{"lineNum":"   81","line":"            }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"            // Wait for thread termination"},
{"lineNum":"   84","line":"            match notary_thread.handle.unwrap().join() {"},
{"lineNum":"   85","line":"                Ok(x) => {"},
{"lineNum":"   86","line":"                    debug!(\"Successful notary thread join {:?}\", x);"},
{"lineNum":"   87","line":"                    ()"},
{"lineNum":"   88","line":"                }"},
{"lineNum":"   89","line":"                Err(e) => {"},
{"lineNum":"   90","line":"                    panic!(\"Failed notary thread join {:?}\", e);"},
{"lineNum":"   91","line":"                }"},
{"lineNum":"   92","line":"            }"},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":"        cli::modules::config::Mode::Both => {"},
{"lineNum":"   95","line":"            debug!(\"Running as both a proposer and notary\");"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"            // Create the SMC Listeners"},
{"lineNum":"   98","line":"            let (notary_smc_tx, notary_smc_rx) = mpsc::channel();"},
{"lineNum":"   99","line":"            let (proposer_smc_tx, proposer_smc_rx) = mpsc::channel();"},
{"lineNum":"  100","line":"            let notary_smc = smc_listener::SMCListener::new(notary_smc_tx);"},
{"lineNum":"  101","line":"            let proposer_smc = smc_listener::SMCListener::new(proposer_smc_tx);"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"            // Start threads for both proposer and notary"},
{"lineNum":"  104","line":"            let mut proposer_thread ="},
{"lineNum":"  105","line":"                client_thread::ClientThread::new(&cli::modules::config::Mode::Proposer);"},
{"lineNum":"  106","line":"            let mut notary_thread ="},
{"lineNum":"  107","line":"                client_thread::ClientThread::new(&cli::modules::config::Mode::Notary);"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"            proposer_thread.run(proposer_smc_rx);"},
{"lineNum":"  110","line":"            notary_thread.run(notary_smc_rx);"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"            if env::config::is_running_with_cargo_test() {"},
{"lineNum":"  113","line":"                thread::sleep(Duration::from_secs(1));"},
{"lineNum":"  114","line":"                let _p_result = proposer_thread"},
{"lineNum":"  115","line":"                    .manager"},
{"lineNum":"  116","line":"                    .unwrap()"},
{"lineNum":"  117","line":"                    .send(client_thread::Command::Terminate);"},
{"lineNum":"  118","line":"                let _n_result = notary_thread"},
{"lineNum":"  119","line":"                    .manager"},
{"lineNum":"  120","line":"                    .unwrap()"},
{"lineNum":"  121","line":"                    .send(client_thread::Command::Terminate);"},
{"lineNum":"  122","line":"            }"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"            // Wait for thread termination"},
{"lineNum":"  125","line":"            match proposer_thread.handle.unwrap().join() {"},
{"lineNum":"  126","line":"                Ok(x) => {"},
{"lineNum":"  127","line":"                    debug!(\"Successful proposer thread join {:?}\", x);"},
{"lineNum":"  128","line":"                    ()"},
{"lineNum":"  129","line":"                }"},
{"lineNum":"  130","line":"                Err(e) => {"},
{"lineNum":"  131","line":"                    panic!(\"Failed proposer thread join {:?}\", e);"},
{"lineNum":"  132","line":"                }"},
{"lineNum":"  133","line":"            }"},
{"lineNum":"  134","line":"            match notary_thread.handle.unwrap().join() {"},
{"lineNum":"  135","line":"                Ok(x) => {"},
{"lineNum":"  136","line":"                    debug!(\"Successful notary thread join {:?}\", x);"},
{"lineNum":"  137","line":"                    ()"},
{"lineNum":"  138","line":"                }"},
{"lineNum":"  139","line":"                Err(e) => {"},
{"lineNum":"  140","line":"                    panic!(\"Failed notary thread join {:?}\", e);"},
{"lineNum":"  141","line":"                }"},
{"lineNum":"  142","line":"            }"},
{"lineNum":"  143","line":"        }"},
{"lineNum":"  144","line":"    }"},
{"lineNum":"  145","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "diamond_drops-8fcdd49d992dd1d5", "date" : "2018-05-23 10:26:39", "instrumented" : 1, "covered" : 1,};
var merged_data = [];
