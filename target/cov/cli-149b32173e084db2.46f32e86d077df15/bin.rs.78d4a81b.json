var data = {lines:[
{"lineNum":"    1","line":"// Simple and robust error handling with error-chain!","class":"linePartCov","hits":"2","order":"1015","possible_hits":"3",},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// `error_chain!` can recurse deeply"},
{"lineNum":"    4","line":"#![recursion_limit = \"1024\"]"},
{"lineNum":"    5","line":"// Remove these allow warnings before a production release"},
{"lineNum":"    6","line":"#![allow(unused_imports)]"},
{"lineNum":"    7","line":"#![allow(dead_code)]"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"extern crate diamond_drops;"},
{"lineNum":"   10","line":"extern crate diamond_drops_cli;"},
{"lineNum":"   11","line":"extern crate diamond_drops_env;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#[macro_use]"},
{"lineNum":"   14","line":"extern crate log;"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#[macro_use]"},
{"lineNum":"   17","line":"extern crate error_chain;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"// We\'ll put our errors in an `errors` module, and other modules in"},
{"lineNum":"   20","line":"// this crate will `use errors::*;` to get access to everything"},
{"lineNum":"   21","line":"// `error_chain!` creates."},
{"lineNum":"   22","line":"mod errors {"},
{"lineNum":"   23","line":"    // Create the Error, ErrorKind, ResultExt, and Result types"},
{"lineNum":"   24","line":"    error_chain!{}"},
{"lineNum":"   25","line":"}"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"use std::env;"},
{"lineNum":"   28","line":"use std::process;"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"pub use errors::*;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"/// Just has error-handling with error-chain"},
{"lineNum":"   33","line":"pub fn main() {"},
{"lineNum":"   34","line":"    if let Err(ref e) = run() {"},
{"lineNum":"   35","line":"        use std::io::Write;"},
{"lineNum":"   36","line":"        let stderr = &mut ::std::io::stderr();"},
{"lineNum":"   37","line":"        let errmsg = \"Error writing to stderr\";"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        writeln!(stderr, \"error: {}\", e).expect(errmsg);"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        for e in e.iter().skip(1) {"},
{"lineNum":"   42","line":"            writeln!(stderr, \"caused by: {}\", e).expect(errmsg);"},
{"lineNum":"   43","line":"        }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        // The backtrace is not always generated. Try to run this example"},
{"lineNum":"   46","line":"        // with `RUST_BACKTRACE=1`."},
{"lineNum":"   47","line":"        if let Some(backtrace) = e.backtrace() {"},
{"lineNum":"   48","line":"            writeln!(stderr, \"backtrace: {:?}\", backtrace).expect(errmsg);"},
{"lineNum":"   49","line":"        }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        process::exit(1);"},
{"lineNum":"   52","line":"    }"},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"// Use this macro to auto-generate the main above. You may want to"},
{"lineNum":"   56","line":"// set the `RUST_BACKTRACE` env variable to see a backtrace."},
{"lineNum":"   57","line":"// quick_main!(run);"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"// Most functions will return the `Result` type, imported from the"},
{"lineNum":"   60","line":"// `errors` module. It is a typedef of the standard `Result` type"},
{"lineNum":"   61","line":"// for which the error type is always our own `Error`."},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"/// Gets arguments from the environment and from the terminal"},
{"lineNum":"   64","line":"pub fn run() -> Result<()> {"},
{"lineNum":"   65","line":"    let args = env::args().skip(1).collect::<Vec<_>>();"},
{"lineNum":"   66","line":"    println!(\"Processing arguments: {:?}\", args);"},
{"lineNum":"   67","line":"    diamond_drops_env::config::set_test_env();"},
{"lineNum":"   68","line":"    let config = diamond_drops_cli::modules::args::parse_cli_args(args).unwrap_or_else(|err| {"},
{"lineNum":"   69","line":"        error!(\"Problem parsing arguments: {}\", err);"},
{"lineNum":"   70","line":"        process::exit(1);"},
{"lineNum":"   71","line":"    });"},
{"lineNum":"   72","line":"    diamond_drops::run(config);"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    Ok(())"},
{"lineNum":"   75","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "cli-149b32173e084db2", "date" : "2018-05-23 10:26:09", "instrumented" : 1, "covered" : 1,};
var merged_data = [];
